// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: communication/communication.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DirectorClient is the client API for Director service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectorClient interface {
	// comunicacion Director jugador
	DecisionPiso1(ctx context.Context, in *EleccionPiso1, opts ...grpc.CallOption) (*Supervivencia, error)
	DecisionPiso2(ctx context.Context, in *EleccionPiso2, opts ...grpc.CallOption) (*Supervivencia, error)
	DecisionPiso3(ctx context.Context, in *EleccionPiso3, opts ...grpc.CallOption) (*HitPatriarca, error)
	InicioPiso(ctx context.Context, in *Senal, opts ...grpc.CallOption) (*Confirmacion, error)
	EstadoFinal(ctx context.Context, in *Supervivencia, opts ...grpc.CallOption) (*Confirmacion, error)
	// comunicacion Director dosh
	DoshMonto(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (*MontoPlayer, error)
	DoshAumento(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (*Confirmacion, error)
	// comunicacion director NameNode
	PeticionChoices(ctx context.Context, in *PeticionRonda, opts ...grpc.CallOption) (*Decisiones, error)
	// comunicacion director NameNode y Namenode Datanode
	NameNodeP1(ctx context.Context, in *EleccionPiso1, opts ...grpc.CallOption) (*Confirmacion, error)
	NameNodeP2(ctx context.Context, in *EleccionPiso2, opts ...grpc.CallOption) (*Confirmacion, error)
	NameNodeP3(ctx context.Context, in *EleccionPiso3, opts ...grpc.CallOption) (*Confirmacion, error)
}

type directorClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectorClient(cc grpc.ClientConnInterface) DirectorClient {
	return &directorClient{cc}
}

func (c *directorClient) DecisionPiso1(ctx context.Context, in *EleccionPiso1, opts ...grpc.CallOption) (*Supervivencia, error) {
	out := new(Supervivencia)
	err := c.cc.Invoke(ctx, "/communication.Director/DecisionPiso1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) DecisionPiso2(ctx context.Context, in *EleccionPiso2, opts ...grpc.CallOption) (*Supervivencia, error) {
	out := new(Supervivencia)
	err := c.cc.Invoke(ctx, "/communication.Director/DecisionPiso2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) DecisionPiso3(ctx context.Context, in *EleccionPiso3, opts ...grpc.CallOption) (*HitPatriarca, error) {
	out := new(HitPatriarca)
	err := c.cc.Invoke(ctx, "/communication.Director/DecisionPiso3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) InicioPiso(ctx context.Context, in *Senal, opts ...grpc.CallOption) (*Confirmacion, error) {
	out := new(Confirmacion)
	err := c.cc.Invoke(ctx, "/communication.Director/InicioPiso", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) EstadoFinal(ctx context.Context, in *Supervivencia, opts ...grpc.CallOption) (*Confirmacion, error) {
	out := new(Confirmacion)
	err := c.cc.Invoke(ctx, "/communication.Director/EstadoFinal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) DoshMonto(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (*MontoPlayer, error) {
	out := new(MontoPlayer)
	err := c.cc.Invoke(ctx, "/communication.Director/DoshMonto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) DoshAumento(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (*Confirmacion, error) {
	out := new(Confirmacion)
	err := c.cc.Invoke(ctx, "/communication.Director/DoshAumento", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) PeticionChoices(ctx context.Context, in *PeticionRonda, opts ...grpc.CallOption) (*Decisiones, error) {
	out := new(Decisiones)
	err := c.cc.Invoke(ctx, "/communication.Director/PeticionChoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) NameNodeP1(ctx context.Context, in *EleccionPiso1, opts ...grpc.CallOption) (*Confirmacion, error) {
	out := new(Confirmacion)
	err := c.cc.Invoke(ctx, "/communication.Director/NameNodeP1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) NameNodeP2(ctx context.Context, in *EleccionPiso2, opts ...grpc.CallOption) (*Confirmacion, error) {
	out := new(Confirmacion)
	err := c.cc.Invoke(ctx, "/communication.Director/NameNodeP2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) NameNodeP3(ctx context.Context, in *EleccionPiso3, opts ...grpc.CallOption) (*Confirmacion, error) {
	out := new(Confirmacion)
	err := c.cc.Invoke(ctx, "/communication.Director/NameNodeP3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectorServer is the server API for Director service.
// All implementations must embed UnimplementedDirectorServer
// for forward compatibility
type DirectorServer interface {
	// comunicacion Director jugador
	DecisionPiso1(context.Context, *EleccionPiso1) (*Supervivencia, error)
	DecisionPiso2(context.Context, *EleccionPiso2) (*Supervivencia, error)
	DecisionPiso3(context.Context, *EleccionPiso3) (*HitPatriarca, error)
	InicioPiso(context.Context, *Senal) (*Confirmacion, error)
	EstadoFinal(context.Context, *Supervivencia) (*Confirmacion, error)
	// comunicacion Director dosh
	DoshMonto(context.Context, *Peticion) (*MontoPlayer, error)
	DoshAumento(context.Context, *Peticion) (*Confirmacion, error)
	// comunicacion director NameNode
	PeticionChoices(context.Context, *PeticionRonda) (*Decisiones, error)
	// comunicacion director NameNode y Namenode Datanode
	NameNodeP1(context.Context, *EleccionPiso1) (*Confirmacion, error)
	NameNodeP2(context.Context, *EleccionPiso2) (*Confirmacion, error)
	NameNodeP3(context.Context, *EleccionPiso3) (*Confirmacion, error)
	mustEmbedUnimplementedDirectorServer()
}

// UnimplementedDirectorServer must be embedded to have forward compatible implementations.
type UnimplementedDirectorServer struct {
}

func (UnimplementedDirectorServer) DecisionPiso1(context.Context, *EleccionPiso1) (*Supervivencia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecisionPiso1 not implemented")
}
func (UnimplementedDirectorServer) DecisionPiso2(context.Context, *EleccionPiso2) (*Supervivencia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecisionPiso2 not implemented")
}
func (UnimplementedDirectorServer) DecisionPiso3(context.Context, *EleccionPiso3) (*HitPatriarca, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecisionPiso3 not implemented")
}
func (UnimplementedDirectorServer) InicioPiso(context.Context, *Senal) (*Confirmacion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InicioPiso not implemented")
}
func (UnimplementedDirectorServer) EstadoFinal(context.Context, *Supervivencia) (*Confirmacion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstadoFinal not implemented")
}
func (UnimplementedDirectorServer) DoshMonto(context.Context, *Peticion) (*MontoPlayer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoshMonto not implemented")
}
func (UnimplementedDirectorServer) DoshAumento(context.Context, *Peticion) (*Confirmacion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoshAumento not implemented")
}
func (UnimplementedDirectorServer) PeticionChoices(context.Context, *PeticionRonda) (*Decisiones, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeticionChoices not implemented")
}
func (UnimplementedDirectorServer) NameNodeP1(context.Context, *EleccionPiso1) (*Confirmacion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NameNodeP1 not implemented")
}
func (UnimplementedDirectorServer) NameNodeP2(context.Context, *EleccionPiso2) (*Confirmacion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NameNodeP2 not implemented")
}
func (UnimplementedDirectorServer) NameNodeP3(context.Context, *EleccionPiso3) (*Confirmacion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NameNodeP3 not implemented")
}
func (UnimplementedDirectorServer) mustEmbedUnimplementedDirectorServer() {}

// UnsafeDirectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectorServer will
// result in compilation errors.
type UnsafeDirectorServer interface {
	mustEmbedUnimplementedDirectorServer()
}

func RegisterDirectorServer(s grpc.ServiceRegistrar, srv DirectorServer) {
	s.RegisterService(&Director_ServiceDesc, srv)
}

func _Director_DecisionPiso1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EleccionPiso1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).DecisionPiso1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Director/DecisionPiso1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).DecisionPiso1(ctx, req.(*EleccionPiso1))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_DecisionPiso2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EleccionPiso2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).DecisionPiso2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Director/DecisionPiso2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).DecisionPiso2(ctx, req.(*EleccionPiso2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_DecisionPiso3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EleccionPiso3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).DecisionPiso3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Director/DecisionPiso3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).DecisionPiso3(ctx, req.(*EleccionPiso3))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_InicioPiso_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Senal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).InicioPiso(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Director/InicioPiso",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).InicioPiso(ctx, req.(*Senal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_EstadoFinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Supervivencia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).EstadoFinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Director/EstadoFinal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).EstadoFinal(ctx, req.(*Supervivencia))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_DoshMonto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peticion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).DoshMonto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Director/DoshMonto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).DoshMonto(ctx, req.(*Peticion))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_DoshAumento_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peticion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).DoshAumento(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Director/DoshAumento",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).DoshAumento(ctx, req.(*Peticion))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_PeticionChoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeticionRonda)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).PeticionChoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Director/PeticionChoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).PeticionChoices(ctx, req.(*PeticionRonda))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_NameNodeP1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EleccionPiso1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).NameNodeP1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Director/NameNodeP1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).NameNodeP1(ctx, req.(*EleccionPiso1))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_NameNodeP2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EleccionPiso2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).NameNodeP2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Director/NameNodeP2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).NameNodeP2(ctx, req.(*EleccionPiso2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_NameNodeP3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EleccionPiso3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).NameNodeP3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Director/NameNodeP3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).NameNodeP3(ctx, req.(*EleccionPiso3))
	}
	return interceptor(ctx, in, info, handler)
}

// Director_ServiceDesc is the grpc.ServiceDesc for Director service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Director_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "communication.Director",
	HandlerType: (*DirectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DecisionPiso1",
			Handler:    _Director_DecisionPiso1_Handler,
		},
		{
			MethodName: "DecisionPiso2",
			Handler:    _Director_DecisionPiso2_Handler,
		},
		{
			MethodName: "DecisionPiso3",
			Handler:    _Director_DecisionPiso3_Handler,
		},
		{
			MethodName: "InicioPiso",
			Handler:    _Director_InicioPiso_Handler,
		},
		{
			MethodName: "EstadoFinal",
			Handler:    _Director_EstadoFinal_Handler,
		},
		{
			MethodName: "DoshMonto",
			Handler:    _Director_DoshMonto_Handler,
		},
		{
			MethodName: "DoshAumento",
			Handler:    _Director_DoshAumento_Handler,
		},
		{
			MethodName: "PeticionChoices",
			Handler:    _Director_PeticionChoices_Handler,
		},
		{
			MethodName: "NameNodeP1",
			Handler:    _Director_NameNodeP1_Handler,
		},
		{
			MethodName: "NameNodeP2",
			Handler:    _Director_NameNodeP2_Handler,
		},
		{
			MethodName: "NameNodeP3",
			Handler:    _Director_NameNodeP3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "communication/communication.proto",
}
